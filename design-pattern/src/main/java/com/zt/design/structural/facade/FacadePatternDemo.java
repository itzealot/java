package com.zt.design.structural.facade;

/**
 * 11. 外观模式.<br />
 * 11.1 意图：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
 * 
 * 11.2 主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。
 * 
 * 11.3 何时使用： 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个"接待员"即可。 2、定义系统的入口。
 * 
 * 11.4 如何解决：客户端不与系统耦合，外观类与系统耦合。
 * 
 * 11.5 关键代码：在客户端和复杂系统之间再加一层，这一次将调用顺序、依赖关系等处理好。
 * 
 * 11.6 应用实例： <br />
 * 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。<br />
 * 2、JAVA 的三层开发模式。
 * 
 * 11.7 优点： <br />
 * 1、减少系统相互依赖。 <br />
 * 2、提高灵活性。<br />
 * 3、提高了安全性。
 * 
 * 11.8 缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。
 * 
 * 11.9 使用场景： <br />
 * 1、为复杂的模块或子系统提供外界访问的模块。 <br />
 * 2、子系统相对独立。 <br />
 * 3、预防低水平人员带来的风险。
 * 
 * 11.10 注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。
 * 
 * @author zengtao
 *
 */
public class FacadePatternDemo {

	public static void main(String[] args) {
		ShapeMaker shapeMaker = new ShapeMaker();

		shapeMaker.drawCircle();

		shapeMaker.drawRectangle();

		shapeMaker.drawSquare();
	}
}
